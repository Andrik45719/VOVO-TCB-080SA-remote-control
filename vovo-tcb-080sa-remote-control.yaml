#VOVO TCB-080SA remote
#https://en.vovokr.com/en/products/tcb-080sa
#Tuya Smart9 S08
esphome:
  name: "vovo-tcb-080sa-remote-control"
  friendly_name: "VOVO TCB-080SA remote control"
  on_boot:
    - priority: 800
      then:
        - delay: 30s
        - lambda: |-
            ESP_LOGD("VOVO", "on_boot id_vovo_bits %08X", id(id_vovo_bits));
            id(id_vovo_parse_bits).execute(id(id_vovo_bits)); //update sensors
            id(vovo_tx_cmd).execute(0x00);  //sync settings
            id(vovo_tx_cmd).execute(0x17);  //sync settings auto lid
            id(vovo_tx_cmd).execute(0x1D);  //sync settings auto light

esp8266:
  board: esp_wroom_02
  restore_from_flash: true

preferences:
  flash_write_interval: 7days

logger:
  baud_rate: 0
  
api:
  encryption:
    key: ""

ota:
  - platform: esphome
    password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "VOVOTCB080SA"
    password: ""

captive_portal:

status_led:
  pin: GPIO4

remote_receiver:
  pin: 
    number: GPIO5
    inverted: true
  on_raw:
    - lambda: |-
        if(x.size() != 68)
        {
          //ESP_LOGE("VOVO", "raw_data len %u", x.size());
          return;
        }
        if(x[0] < 3500 || x[0] > 4500 || x[1] > -7500 || x[1] < -8500)
        {
          ESP_LOGE("VOVO", "RAW bad header %d, %d", x[0], x[1]);
          return;
        }
        uint32_t bits = 0;
        for(int i = 0; i < 32; i++)
        {
          bits <<= 1;
          bits |= x[(i + 1) * 2 + 1] < -600;
        }
        ESP_LOGD("VOVO", "received bits: %08x", bits);
        id(id_vovo_bits) = bits;
        char buf[32];
        sprintf(buf, "0x%08X", bits);
        id(text_bits).publish_state(buf);
        id(id_vovo_parse_bits).execute(bits);
        auto exec_cmd_call = id(exec_cmd).make_call();
        exec_cmd_call.set_option("idle");
        exec_cmd_call.perform();
        return;

globals:
  - id: id_vovo_bits
    type: uint32_t
    restore_value: true

script:
  - id: id_vovo_parse_bits
    parameters:
      bits: uint32_t
    then:
      - lambda: |-
          ESP_LOGD("VOVO", "script bits: %08x", bits);
          int cmd = (bits >> (31 - 4)) & 0x1f;
          int pressure = (bits >> (31 - 7)) & 7;
          int seat_temp = (bits >> (31 - 9)) & 3;
          int water_temp = (bits >> (31 - 11)) & 3;
          int dry_temp = (bits >> (31 - 13)) & 3;
          int power_save = (bits >> (31 - 14)) & 1;
          int auto_flush = (bits >> (31 - 15)) & 1;
          int deodorant = (bits >> (31 - 16)) & 1;
          int auto_light = (bits >> (31 - 24)) & 1;
          int auto_lid = (bits >> (31 - 25)) & 1;
          id(id_cmd).publish_state(cmd);
          id(id_pressure).publish_state(pressure);
          id(id_seat_temp).publish_state(seat_temp);
          id(id_water_temp).publish_state(water_temp);
          id(id_dry_temp).publish_state(dry_temp);
          id(id_deodorant).publish_state(deodorant);
          id(id_power_save).publish_state(power_save);
          id(id_auto_flush).publish_state(auto_flush);
          if(cmd != 0x14 && cmd != 0x16)
          {
            id(id_auto_light).publish_state(auto_light);
          }
          id(id_auto_lid).publish_state(auto_lid);
          if(1)
          {
            int crc = (bits >> (31 - 23)) & 0x0f;
            int crc_calc = ((bits >> (31 - 7)) & 0x0f) ^ ((bits >> (31 - 15)) & 0x0f);
            ESP_LOGD("VOVO", "cmd: %02X, pressure: %d, seat_temp: %d, water_temp: %d, dry_temp: %d", cmd, pressure, seat_temp, water_temp, dry_temp);
            ESP_LOGD("VOVO", "auto_flush %d, deodorant %d, power_save %d, auto_light %d, auto_lid %d", auto_flush, deodorant, power_save, auto_light, auto_lid);
            ESP_LOGD("VOVO", "CRC: %X/%X", crc, crc_calc);
          }

  - id: vovo_tx_cmd
    parameters:
      cmd: int
    then:
      - lambda: |-
          auto call = id(trans).transmit();
          auto data = call.get_data();
          esphome::remote_base::RawTimings ir_code;
          uint32_t bits;
          bits = (cmd << (31 - 4));
          bits |= (((int)id(id_pressure).state & 7) << (31 - 7)); 
          bits |= (((int)id(id_seat_temp).state & 3) << (31 - 9));
          bits |= (((int)id(id_water_temp).state & 3) << (31 - 11));
          bits |= (((int)id(id_dry_temp).state & 3) << (31 - 13));
          bits |= ((id(id_power_save).state & 1) << (31 - 14));
          bits |= ((id(id_auto_flush).state & 1) << (31 - 15));
          bits |= ((id(id_deodorant).state & 1) << (31 - 16));
          bits |= (1 << (31 - 17));
          bits |= ((id(id_auto_light).state & 1) << (31 - 24));
          bits |= ((id(id_auto_lid).state & 1) << (31 - 25));
          int crc = ((bits >> (31 - 7)) & 0x0f) ^ ((bits >> (31 - 15)) & 0x0f);
          bits &= ~(0x0f << (31 - 23));
          bits |= (crc & 0x0f) << (31 - 23);
          ESP_LOGD("VOVO", "TX cmd: %02X bits: %08X", cmd, bits);
          ir_code.push_back(4000);
          ir_code.push_back(-8000);
          for(int i = 0; i < 32; i++)
          {
            ir_code.push_back(500);
            if(bits & (1 << (31 - i)))
              ir_code.push_back(-1500);
            else
              ir_code.push_back(-500);
          }
          ir_code.push_back(500);
          ir_code.push_back(-10000);
          data->set_data(ir_code);
          data->set_carrier_frequency(38000);
          call.perform();

select:
  - platform: template
    name: "exec cmd"
    id: exec_cmd
    optimistic: true
    options:
    - idle
    - stop
    - posterior wash
    - enema
    - feminine wash
    - dry
    - unknown
    - oscillating
    - pulsating
    - rhythm
    - pressure up
    - pressure down
    - position up
    - position down
    - seat temp plus
    - seat temp minus
    - water temp plus
    - water temp minus
    - dry temp plus
    - dry temp minus
    - nozzle
    - power saving
    - deodorant
    - auto flush
    - auto lid
    - full flush
    - small flush
    - lid open 1
    - lid open 2
    - lid close
    - auto light
    initial_option: idle
    on_value:
      then:
        - lambda: |-
            int cmd = id(exec_cmd).active_index().value();
            if(cmd > 0)
            {
              id(vovo_tx_cmd).execute(cmd - 1);
            }
remote_transmitter:
  pin: 
    number: GPIO14
    inverted: false
  carrier_duty_percent: 50%
  id: trans

text_sensor:
  - platform: template
    name: "bits"
    id: text_bits
    lambda: |- 
      char buf[32];
      sprintf(buf, "0x%08X", id(id_vovo_bits));
      return std::string(buf);


  - platform: uptime
    name: "Uptime"

sensor:
  - platform: template
    name: "cmd"
    id: id_cmd
    accuracy_decimals: 0
    on_value: 
      then:
        - homeassistant.event:
            event: esphome.vovo-rc-cmd-received
            data:
              message: x;

number:    
  - platform: template
    name: "pressure"
    id: id_pressure
    optimistic: true
    min_value: 0
    max_value: 4
    step: 1
  - platform: template
    name: "seat temperature"
    id: id_seat_temp
    optimistic: true
    min_value: 0
    max_value: 3
    step: 1
  - platform: template
    name: "water temperature"
    id: id_water_temp
    optimistic: true
    min_value: 0
    max_value: 3
    step: 1
  - platform: template
    name: "dry temperature"
    id: id_dry_temp
    optimistic: true
    min_value: 0
    max_value: 3
    step: 1

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      inverted: true
    internal: true
    name: "Button"

switch:
  - platform: template
    name: "deodorant"
    id: id_deodorant
    optimistic: true
  - platform: template
    name: "power_save"
    id: id_power_save
    optimistic: true
  - platform: template
    name: "auto_flush"
    id: id_auto_flush
    optimistic: true
  - platform: template
    name: "auto_light"
    id: id_auto_light
    optimistic: true
  - platform: template
    name: "auto_lid"
    id: id_auto_lid
    optimistic: true

button:
  - platform: restart
    name: "Restart"
